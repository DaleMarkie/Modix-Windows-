// Script to auto-generate module imports and routes in App.js
// Run: node scripts/generateAppModuleSection.js

const fs = require('fs');
const path = require('path');

const CONFIG_PATH = path.join(__dirname, '../backend/modix_config/modix_config.json');
const MODULE_ROOT = path.join(__dirname, '../module_system');
const APP_JS_PATH = path.join(__dirname, '../src/App.js');

function getEnabledModules() {
  const config = JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf-8'));
  const enabledCore = Array.isArray(config.CORE_MODULES) ? config.CORE_MODULES : [];
  const enabledOptional = Array.isArray(config.OPTIONAL_MODULES) ? config.OPTIONAL_MODULES : [];
  return {
    Core: enabledCore,
    Optional: enabledOptional,
  };
}

function findFrontendEntry(category, moduleName) {
  const basePath = path.join(MODULE_ROOT, category, moduleName, 'frontend');
  const jsPath = path.join(basePath, 'page.js');
  const tsxPath = path.join(basePath, 'page.tsx');
  if (fs.existsSync(tsxPath)) return tsxPath;
  if (fs.existsSync(jsPath)) return jsPath;
  return null;
}

function generateImportStatements(enabled) {
  const imports = [];
  for (const category of Object.keys(enabled)) {
    for (const moduleName of enabled[category]) {
      const frontendPath = findFrontendEntry(category, moduleName);
      if (frontendPath) {
        // Calculate import path relative to src/App.js
        const relImport = path.relative(path.dirname(APP_JS_PATH), frontendPath).replace(/\\/g, '/');
        const importVar = `${moduleName}`.replace(/[^a-zA-Z0-9_]/g, '_');
        imports.push(`import ${importVar} from './${relImport.replace(/^\.?.\/?/, '')}';`);
      }
    }
  }
  return imports.join('\n');
}

function generateRouteStatements(enabled) {
  const routes = [];
  for (const category of Object.keys(enabled)) {
    for (const moduleName of enabled[category]) {
      const importVar = `${moduleName}`.replace(/[^a-zA-Z0-9_]/g, '_');
      const routePath = `/${moduleName.toLowerCase()}`;
      const routeKey = `${moduleName.toLowerCase()}`;
      routes.push(`  <Route path="${routePath}" element={<${importVar} />} key="${routeKey}" />`);
    }
  }
  return `// This array is auto-generated. Do not edit manually.\nconst autoGeneratedModuleRoutes = (\n  <>\n${routes.join('\n')}\n  </>\n);`;
}

function injectGeneratedCode(appJsContent, importsCode, routesCode) {
  // Replace between markers
  appJsContent = appJsContent.replace(
    /(\/\/ === AUTO-GENERATED MODULE IMPORTS START ===)[\s\S]*?(\/\/ === AUTO-GENERATED MODULE IMPORTS END ===)/,
    `$1\n${importsCode}\n$2`
  );
  appJsContent = appJsContent.replace(
    /(\/\/ === AUTO-GENERATED MODULE ROUTES START ===)[\s\S]*?(\/\/ === AUTO-GENERATED MODULE ROUTES END ===)/,
    `$1\n${routesCode}\n$2`
  );
  return appJsContent;
}

function main() {
  const enabled = getEnabledModules();
  const importsCode = generateImportStatements(enabled);
  const routesCode = generateRouteStatements(enabled);
  let appJsContent = fs.readFileSync(APP_JS_PATH, 'utf-8');
  appJsContent = injectGeneratedCode(appJsContent, importsCode, routesCode);
  fs.writeFileSync(APP_JS_PATH, appJsContent);
  console.log('[GENERATED] Module imports and routes injected into App.js');
}

main();
